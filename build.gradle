import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

plugins {
  id 'java-library'
  id 'maven-publish'
  id 'jacoco'
  // Manage optional dependencies in maven pom.
  id 'nebula.optional-base' version '7.0.0'
  id 'com.github.spotbugs' version '5.1.3'
  id 'org.owasp.dependencycheck' version '8.2.1'
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '4.9-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '4.9-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokCommonJavadocs') ? project.getProperty('interlokCommonJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName='Interlok Application/KIE'
  componentDesc='Using KIE/Drools with Interlok services'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion = '2.0.7'
  mockitoVersion = '5.2.0'
  droolsVersion = '7.73.0.Final'
}

ext.hostname = { ->
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    return System.getenv("COMPUTERNAME")
  }
  return System.getenv("HOSTNAME")
}

ext.testResourcesDir = { ->
  return "${project.projectDir}/src/test/resources".replaceAll("\\\\", "/")
}

ext.propertyTemplate = { dir, filename ->
  def file = new File(dir, filename + "." + hostname())
  if (file.exists()) {
    return file.getName()
  }
  return filename
}
ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return gitBranchNameOrTimestamp(branchName);
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
group   = 'com.adaptris'
version = releaseVersion
def versionDir = "$buildDir/version"

// Disable gradle module generation since we probably don't want
// xxx.module files in your repository.
allprojects {
  tasks.withType(Jar) {
    metaInf {
      from ("$rootDir") {
        include 'LICENSE*'
        include 'NOTICE*'
      }
    }
  }
  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }
}

repositories {
  mavenCentral()
  if (defaultNexusRepo != "unknown") {
    maven {
      url "$defaultNexusRepo"
      allowInsecureProtocol true
    }
  }
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
}

configurations {
  javadoc {}
  offlineJavadocPackages {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
  // INTERLOK-3197 exclude old javax.mail
  all*.exclude group: 'com.sun.mail', module: 'javax.mail'
  all*.exclude group: 'javax.validation', module: 'validation-api'
  all*.exclude group: 'javax.activation', module: 'activation'
  all*.exclude group: 'javax.activation', module: 'javax.activation-api'

  // INTERLOK-3740 switch from jcraft to com.github.mwiede jsch fork.
  all*.exclude group: 'com.jcraft', module: 'jsch'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  api ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
  api ("com.adaptris:interlok-common:$interlokCoreVersion") { changing= true}
  implementation ("com.thoughtworks.xstream:xstream:1.4.20")
  implementation ("org.apache.commons:commons-collections4:4.4")
  implementation ("org.drools:drools-core:$droolsVersion") {  }
  implementation ("org.drools:drools-compiler:$droolsVersion") {  }
  implementation ("commons-codec:commons-codec:1.16.0")

  implementation ("org.slf4j:slf4j-api:$slf4jVersion")

  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

  testAnnotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

  testImplementation ('junit:junit:4.13.2')
  testImplementation ("org.slf4j:slf4j-simple:$slf4jVersion")
  testImplementation ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true }
  testImplementation ("org.mockito:mockito-core:$mockitoVersion")
  testImplementation ("org.mockito:mockito-inline:$mockitoVersion")

  // Required for KScanner, but is generally optional
  testImplementation ("org.kie:kie-ci:$droolsVersion") {
    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    exclude group: 'com.google.guava', module: 'guava'
    exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
  }
  testImplementation ("org.apache.httpcomponents:httpclient:4.5.14")
  testImplementation ("com.google.guava:guava:32.1.2-jre")
  testImplementation ("org.codehaus.plexus:plexus-utils:3.5.1")

  // this is purely for testing kjar connections, simple kmodule based kjar.
  // don't expect it to change, published out of kie-rule-demo sub-dir.
  testImplementation ('com.adaptris:kie-rule-demo:0.0.1-SNAPSHOT') { changing= true}

  javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}
  offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
  offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}

}

task buildUnitTestProperties(type: Copy) {
  def propertyFile = propertyTemplate(testResourcesDir(), "unit-tests.properties.template")
  delete file(testResourcesDir() + "/unit-tests.properties")
  from file(testResourcesDir() + "/" + propertyFile)
  into (testResourcesDir())
  rename { String fileName ->
    fileName.replace(propertyFile, 'unit-tests.properties')
  }
  filter(ReplaceTokens, tokens: [JAVA_HOME: System.getProperty("java.home").replaceAll("\\\\", "/")])
  filter(ReplaceTokens, tokens: [BASE_DIR: project.projectDir.getCanonicalPath().replaceAll("\\\\", "/")])
  filter(ReplaceTokens, tokens: [BUILD_DIR: project.buildDir.getCanonicalPath().replaceAll("\\\\", "/")])
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties")
}

jacocoTestReport {
 reports {
   xml.required= true
   html.required= true
  }
}

sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}

// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'component.description', value: componentDesc)
      entry(key: 'build.version', value: project.version)
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'build.info', value: buildInfo())
    }
  }
}


task offlinePackageList(type: Copy) {
  description 'Build an offline package-list for javadocs'
  group 'Documentation'

  project.configurations.offlineJavadocPackages.collect { dependency ->
    from(zipTree(dependency)) {
      into dependency.name
    }
  }
  include "package-list"
  include "element-list"
  into offlineJavadocPackageDir
}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
             "Build-Jdk": System.getProperty('java.version'),
             "Implementation-Title": componentName,
             "Implementation-Version": project.version,
             "Implementation-Vendor-Id": project.group,
             "Implementation-Vendor": organizationName)
  }
}

javadoc {
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption "-no-module-directories", true
    options.tags('apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:','implNote:a:Implementation Note:')
    title= componentName
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
    classifier = 'examples'
    from new File(buildDir, '/examples')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives examplesJar
    archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact examplesJar { classifier "examples" }
      artifact sourcesJar { classifier "sources" }
      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", componentDesc)
		asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.8.2+")
        properties.appendNode("license", "false")
        properties.appendNode("tags", "drools,jboss rules,kie")
        properties.appendNode("externalUrl", "https://www.drools.org/learn/documentation.html")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-kie")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

spotbugsMain {
  effort = "max"
  reportLevel = "high"
  reports {
    xml {
      required.set(false)
    }
    html {
      required.set(true)
      stylesheet = 'default.xsl'
    }
  }
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false

dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  scanConfigurations = [ "api", "compileClasspath", "runtimeClasspath" ]
  formats = [ "HTML", "JUNIT" ]
  junitFailOnCVSS = 7.0
  failBuildOnCVSS = 7.0
  analyzers {
    assemblyEnabled=false
    knownExploitedURL=project.findProperty('dependencyCheckKnownExploitedURL')
  }
}

check.dependsOn jacocoTestReport
processTestResources.dependsOn buildUnitTestProperties
clean.dependsOn deleteGeneratedFiles
javadoc.dependsOn offlinePackageList
